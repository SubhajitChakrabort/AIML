<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exam Center</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        /*.navbar {
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
        }*/
        
        .flex-container {
            display: flex;
            align-items: center;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand text-white" href="/">AIML</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active text-white" aria-current="page" href="/"><i
                                class="fa fa-dashboard"></i>
                             Dashboard</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active text-white" href="#" id="navbarDropdownSchool"
                            role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-school"></i> School
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdownSchool">
                            <li><a class="dropdown-item" href="/school">Add School</a></li>
                            <li><a class="dropdown-item" href="/viewsc">Edit / View School</a></li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active text-white" href="#" id="navbarDropdownStudent"
                            role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-user-plus"></i> Student
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdownStudent">
                            <li><a class="dropdown-item" href="/register">Add Student</a></li>
                            <li><a class="dropdown-item" href="/viewst">Edit / View Student</a></li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active text-white" href="#" id="navbarDropdownExamCenter"
                            role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-school"></i> Exam Center
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdownExamCenter">
                            <li><a class="dropdown-item" href="/center">Create Center</a></li>
                            <!--<li><a class="dropdown-item" href="/viewct">View Center</a></li>-->

                        </ul>
                    </li>
                    
                </ul>
            </div>
        </div>
    </nav>
    <button class="btn btn-success mt-3 mx-2" onclick={history.back()}> Go Back </button>
    <a class="btn btn-success mt-3 mx-auto" href="/viewct">View Center</a>



    <div class="container mt-5">
         <div class="mb-3 w-50">
                <label for="date" class="form-label">Date</label>
                <input type="date" class="form-control" id="date" name="date" onchange="updateDate()" readonly>
            </div>
        <div class="dropdown mb-3 flex-container gap-3">
            <label for="centerDropdown" class="form-label"> Center Name</label>
            <select class="form-select w-50" id="centerDropdown" name="cname">
                <!-- Center dropdown items will be inserted here -->
            </select>
        </div>

        <div id="dropdownContainer">
            <div class="dropdown mb-3 flex-container gap-3">
                <label for="inviteSchoolDropdown" class="form-label">Invite School</label>
                <select class="form-select w-50 inviteSchoolDropdown" id="inviteSchoolDropdown" name="ischool">
                    <!-- Invite school dropdown items will be inserted here -->
                </select>
                <button class="btn btn-success ms-2 addDropdown"><i class="fas fa-plus"></i></button>
                <button class="btn btn-danger ms-2 removeDropdown"><i class="fas fa-minus"></i></button>
            </div>
        </div>

        <div class="mt-3">
            <table class="table">
                <thead>
                    <tr>
                        <th>Center Code</th>
                        <th>Invite School</th>
                        <th>City</th>
                    </tr>
                </thead>
                <tbody id="centerInviteTableBody">
                    
                </tbody>
            </table>
        </div>
        <button class="btn btn-success d-block mx-auto" id="createCenterBtn">Create Center</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const dropdownContainer = document.getElementById('dropdownContainer');
            const centerDropdown = document.getElementById('centerDropdown');
            const tableBody = document.getElementById('centerInviteTableBody');

            // Populate dropdowns with school codes
            populateDropdowns();
            createTableRow(); // Call createTableRow initially

            dropdownContainer.addEventListener('click', (event) => {
                if (event.target.classList.contains('addDropdown')) {
                    addNewDropdown();
                }

                if (event.target.classList.contains('removeDropdown')) {
                    event.target.parentElement.remove();
                    createTableRow(); // Update table when dropdown removed
                }
            });

            document.getElementById('createCenterBtn').addEventListener('click', () => {
                createCenter();
            });

            // Update table on center dropdown change
            centerDropdown.addEventListener('change', () => {
                createTableRow();
            });

            function populateDropdowns() {
                // Populate the initial center dropdown
                populateDropdown(centerDropdown, 'Select Center Name');
                // Populate the initial invite school dropdown
                populateDropdown(document.querySelector('.inviteSchoolDropdown'), 'Select Invite School');
            }

            function addNewDropdown() {
                const newDropdown = document.createElement('div');
                newDropdown.classList.add('dropdown', 'mb-3', 'flex-container', 'gap-3');
                newDropdown.innerHTML = `
                    <label for="inviteSchoolDropdown" class="form-label">Invite School</label>
                    <select class="form-select w-50 inviteSchoolDropdown" name="ischool">
                        <!-- Invite school dropdown items will be inserted here -->
                    </select>
                    <button class="btn btn-success ms-2 addDropdown"><i class="fas fa-plus"></i></button>
                    <button class="btn btn-danger ms-2 removeDropdown"><i class="fas fa-minus"></i></button>
                `;
                dropdownContainer.appendChild(newDropdown);
                populateDropdown(newDropdown.querySelector('.inviteSchoolDropdown'), 'Select Invite School'); // Populate the newly added dropdown
                newDropdown.querySelector('.inviteSchoolDropdown').addEventListener('change', () => {
                    createTableRow();
                }); // Add event listener to new dropdown
            }

            function populateDropdown(dropdown, defaultOptionText) {
                fetch('/api/schools')
                    .then(response => response.json())
                    .then(schools => {
                        // Add default option
                        const defaultOption = document.createElement('option');
                        defaultOption.textContent = defaultOptionText;
                        defaultOption.disabled = true;
                        defaultOption.selected = true;
                        dropdown.appendChild(defaultOption);

                        // Add other options
                        const existingCodes = new Set(); // To store existing school codes
                        schools.forEach(school => {
                            // Check if the school code already exists, if not, add it
                            if (!existingCodes.has(school.school_code)) {
                                existingCodes.add(school.school_code);
                                const option = document.createElement('option');
                                option.textContent = `${school.school_code} - ${school.city}`;
                                option.value = `${school.school_code} - ${school.city}`; // Set value as combined school code and city
                                dropdown.appendChild(option);
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching school data:', error));
            }


            function createTableRow() {
                const centerCode = centerDropdown.value;
                const inviteSchoolDropdowns = document.querySelectorAll('.inviteSchoolDropdown');
                tableBody.innerHTML = ''; // Clear table body

                inviteSchoolDropdowns.forEach(dropdown => {
                    if (dropdown.value !== 'Select Invite School') {
                        const optionValue = dropdown.value.split(" - ");
                        const schoolCode = optionValue[0];
                        const city = optionValue[1];
                        const newRow = document.createElement('tr');
                        newRow.innerHTML = `
                            <td>${centerCode}</td>
                            <td>${schoolCode}</td>
                            <td>${city}</td>
                        `;
                        tableBody.appendChild(newRow);
                    }
                });
            }

            function createCenter() {
                const centerCode = centerDropdown.value;
                const inviteSchoolDropdowns = document.querySelectorAll('.inviteSchoolDropdown');
                let selectedInviteSchools = [];

                inviteSchoolDropdowns.forEach(dropdown => {
                    if (dropdown.value !== 'Select Invite School') {
                        const optionValue = dropdown.value.split(" - ");
                        const schoolCode = optionValue[0];
                        const city = optionValue[1];
                        selectedInviteSchools.push({
                            code: schoolCode,
                            city: city
                        });
                    }
                });

                // Send data to the backend
                fetch('/api/createCenter', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            centerCode: centerCode,
                            inviteSchools: selectedInviteSchools
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to create center');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Center created successfully:', data);
                        // Optionally, you can display a success message or redirect the user
                        window.location.reload(); // Reload the page after center creation
                    })
                    .catch(error => {
                        console.error('Error creating center:', error);
                        // Optionally, you can display an error message to the user
                    });
            }


        });
         function updateDate() {
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            document.getElementById('date').value = today;
        }

        updateDate(); // Update date on page load

    </script>
    

</body>

</html>
